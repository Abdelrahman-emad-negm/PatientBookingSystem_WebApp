@model List<PatientBooking.Models.Appointment>

@{
    ViewData["Title"] = "Today's Appointments";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var doctorName = ViewBag.DoctorName as string ?? "Doctor";
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

<div class="container mt-5">
    @* Render an anti-forgery token once so JS can read it *@
    <form id="__AjaxAntiForgeryForm" style="display:none">
        @Html.AntiForgeryToken()
    </form>

    <div class="card shadow-sm">
        <div class="card-header bg-primary text-white">
            <h4 class="mb-0">
                <i class="fas fa-calendar-day me-2"></i> Today's Appointments - @doctorName
            </h4>
        </div>
        <div class="card-body">
            @if (!Model.Any())
            {
                <div class="alert alert-info text-center">
                    <i class="fas fa-info-circle me-1"></i> No appointments for today.
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-hover align-middle">
                        <thead class="table-light">
                            <tr>
                                <th>Patient</th>
                                <th>Date</th>
                                <th>Time</th>
                                <th>Status</th>
                                <th class="text-center">State</th> @* Upcoming / Past *@
                                <th class="text-center">Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var a in Model)
                            {
                                var appointmentDateTime = a.Date.Add(a.TimeSlot); // Date + TimeSlot
                                var isUpcoming = appointmentDateTime > DateTime.Now;
                                var isPast = appointmentDateTime <= DateTime.Now;
                                var displayDate = appointmentDateTime.ToString("dddd, dd/MM/yyyy"); // e.g. Tuesday, 16/09/2025
                                var displayTime = appointmentDateTime.ToString("hh:mm tt"); // e.g. 03:00 PM
                                var patientName = string.IsNullOrWhiteSpace(a.Patient?.Name) ? "—" : a.Patient.Name;

                                var (statusClass, statusIcon) = a.Status switch
                                {
                                    PatientBooking.Models.AppointmentStatus.Confirmed => ("badge bg-primary", "fas fa-check-circle"),
                                    PatientBooking.Models.AppointmentStatus.Pending => ("badge bg-warning text-dark", "fas fa-hourglass-half"),
                                    PatientBooking.Models.AppointmentStatus.Cancelled => ("badge bg-danger", "fas fa-times-circle"),
                                    PatientBooking.Models.AppointmentStatus.Available => ("badge bg-success", "fas fa-calendar-check"),
                                    PatientBooking.Models.AppointmentStatus.Completed => ("badge bg-secondary", "fas fa-clipboard-check"),
                                    _ => ("badge bg-light text-dark", "fas fa-info-circle")
                                };
                                <tr>
                                    <td>@patientName</td>
                                    <td>@displayDate</td>
                                    <td>
                                        @displayTime
                                    </td>
                                    <td>
                                        <span class="@statusClass">
                                            <i class="@statusIcon me-1"></i> @a.Status
                                        </span>
                                    </td>
                                    <td class="text-center">
                                        @if (isUpcoming)
                                        {
                                            <span class="badge bg-info text-dark">Upcoming</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">Past</span>
                                        }
                                    </td>
                                    <td class="text-center">
                                        @* Show Completed button only when appointment is Confirmed (same workflow you wanted) *@
                                        @if (a.Status == PatientBooking.Models.AppointmentStatus.Confirmed)
                                        {
                                            <button class="btn btn-sm btn-outline-success"
                                                    onclick="markCompleted(@a.AppointmentId)">
                                                <i class="fas fa-check"></i> Completed
                                            </button>
                                        }
                                        else if (a.Status == PatientBooking.Models.AppointmentStatus.Pending)
                                        {
                                            <span class="text-muted">Awaiting approval</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">—</span>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Read antiforgery token from the hidden form
        function getAntiForgeryToken() {
            var tokenInput = document.querySelector('#__AjaxAntiForgeryForm input[name="__RequestVerificationToken"]');
            return tokenInput ? tokenInput.value : null;
        }

        // Mark appointment as completed (POST urlencoded with antiforgery token)
        function markCompleted(id) {
            var token = getAntiForgeryToken();
            if (!token) {
                alert('Request verification token not found. Please reload the page.');
                return;
            }

            var body = 'appointmentId=' + encodeURIComponent(id) + '&__RequestVerificationToken=' + encodeURIComponent(token);

            fetch('@Url.Action("MarkAsCompleted", "Doctor")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                body: body
            })
            .then(function (res) { return res.json(); })
            .then(function (data) {
                alert(data.message);
                if (data.success) location.reload();
            })
            .catch(function (err) {
                console.error(err);
                alert('An error occurred while marking the appointment as completed.');
            });
        }
    </script>
}
