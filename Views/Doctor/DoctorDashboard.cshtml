@model Dictionary<PatientBooking.Models.AppointmentStatus, List<PatientBooking.Models.Appointment>>

@{
    ViewData["Title"] = "Doctor Dashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var doctorPhoto = string.IsNullOrEmpty(ViewBag.Photo as string) ? "/images/default-doctor.png" : ViewBag.Photo;
    var today = DateTime.Today;
    var now = DateTime.Now;
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

<div class="container py-4">
    <!-- Output an antiforgery token (hidden) so JavaScript can read it reliably -->
    @Html.AntiForgeryToken()

    <!-- Doctor Header -->
    <div class="doctor-header card border-0 shadow mb-4">
        <div class="card-body p-4 d-flex justify-content-between align-items-center">
            <div class="d-flex align-items-center">
                <div class="doctor-avatar me-3">
                    <img src="@doctorPhoto"
                         alt="Doctor Photo"
                         class="rounded-circle border shadow-sm"
                         style="width:70px; height:70px; object-fit:cover;" />
                </div>
                <div>
                    <h2 class="mb-1">Doctor Dashboard</h2>
                    <span class="badge bg-success">
                        <i class="fas fa-circle me-1"></i> Online
                    </span>
                </div>
            </div>
            <div>
                <span class="text-muted">
                    <i class="far fa-calendar-alt me-1"></i> @DateTime.Now.ToString("dddd, dd MMM yyyy")
                </span>
            </div>
        </div>
    </div>

    <!-- Alerts -->
    @if (ViewBag.Error != null)
    {
        <div class="alert alert-danger alert-dismissible fade show">
            <i class="fas fa-exclamation-circle me-2"></i> @ViewBag.Error
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }
    @if (ViewBag.Success != null)
    {
        <div class="alert alert-success alert-dismissible fade show">
            <i class="fas fa-check-circle me-2"></i> @ViewBag.Success
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <!-- Add Slots Form -->
    <div class="card shadow-sm mb-4">
        <div class="card-header bg-primary text-white">
            <h5 class="mb-0"><i class="fas fa-plus-circle me-2"></i> Add Available Slots</h5>
        </div>
        <div class="card-body">
            <form asp-action="AddAppointmentsRange" method="post" id="addSlotsForm">
                @* Anti-forgery token inside form as well (safe to render twice) *@
                @Html.AntiForgeryToken()

                <div class="row g-3">
                    <div class="col-md-4">
                        <label class="form-label fw-bold">Date</label>
                        <input id="slotDate" type="date" name="date" class="form-control"
                               value="@today.ToString("yyyy-MM-dd")"
                               min="@today.ToString("yyyy-MM-dd")" required />
                    </div>
                    <div class="col-md-4">
                        <label class="form-label fw-bold">Start Time</label>
                        @* Remove static 'min' here; we'll control it via JS so it only applies for today's date *@
                        <input id="startTimeInput" type="time" name="startTime" class="form-control"
                               value="@now.ToString("HH:mm")"
                               required />
                    </div>
                    <div class="col-md-4">
                        <label class="form-label fw-bold">End Time</label>
                        <input id="endTimeInput" type="time" name="endTime" class="form-control"
                               required />
                    </div>
                </div>
                <div class="mt-3">
                    <button type="submit" class="btn btn-success">
                        <i class="fas fa-plus-circle me-1"></i> Add Slots
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Appointments Tabs -->
    <div class="card shadow-sm">
        <div class="card-header bg-white border-bottom-0">
            <h5 class="mb-0"><i class="fas fa-calendar-alt me-2 text-primary"></i> My Appointments</h5>
        </div>
        <div class="card-body">
            <ul class="nav nav-tabs mb-3" id="apptTabs">
                @foreach (var status in Model.Keys)
                {
                    <li class="nav-item">
                        <button class="nav-link @(status == Model.Keys.First() ? "active" : "")"
                                data-bs-toggle="tab" data-bs-target="#tab-@status">
                            @status
                        </button>
                    </li>
                }
            </ul>

            <div class="tab-content">
                @foreach (var status in Model.Keys)
                {
                    var appts = Model[status];
                    <div class="tab-pane fade @(status == Model.Keys.First() ? "show active" : "")" id="tab-@status">
                        @if (!appts.Any())
                        {
                            <div class="alert alert-info text-center">No @status appointments</div>
                        }
                        else
                        {
                            <div class="table-responsive">
                                <table class="table table-hover align-middle">
                                    <thead class="table-light">
                                        <tr>
                                            <th>Date</th>
                                            <th>Time</th>
                                            <th>Patient</th>
                                            <th>Status</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var a in appts)
                                        {
                                            bool isPast = a.Date < today || (a.Date == today && a.TimeSlot < now.TimeOfDay);
                                            string rowClass = isPast ? "table-secondary text-muted" : "";
                                            string badgeClass = a.Status switch
                                            {
                                                PatientBooking.Models.AppointmentStatus.Available => "bg-success",
                                                PatientBooking.Models.AppointmentStatus.Pending => "bg-warning text-dark",
                                                PatientBooking.Models.AppointmentStatus.Confirmed => "bg-primary",
                                                PatientBooking.Models.AppointmentStatus.Completed => "bg-secondary",
                                                PatientBooking.Models.AppointmentStatus.Rejected => "bg-danger",
                                                _ => "bg-light text-dark"
                                            };

                                            <tr class="@rowClass">
                                                <!-- Show full day name + date -->
                                                <td>@a.Date.ToString("dddd, dd MMM yyyy")</td>
                                                <!-- Show time in 12-hour format with AM/PM -->
                                                <td>@a.TimeSlot.ToString(@"hh\:mm") @((a.TimeSlot.Hours >= 12) ? "PM" : "AM")</td>
                                                <td>@(a.Patient?.Name ?? "—")</td>
                                                <td><span class="badge @badgeClass">@a.Status</span></td>
                                                <td>
                                                    @if (!isPast)
                                                    {
                                                        if (a.Status == PatientBooking.Models.AppointmentStatus.Available ||
                                                        a.Status == PatientBooking.Models.AppointmentStatus.Pending)
                                                        {
                                                            <button class="btn btn-sm btn-outline-danger"
                                                                    onclick="confirmDelete(@a.AppointmentId)">
                                                                <i class="fas fa-trash-alt"></i>
                                                            </button>
                                                        }
                                                        else if (a.Status == PatientBooking.Models.AppointmentStatus.Confirmed)
                                                        {
                                                            <button class="btn btn-sm btn-outline-success"
                                                                    onclick="markCompleted(@a.AppointmentId)">
                                                                <i class="fas fa-check"></i> Completed
                                                            </button>
                                                        }
                                                        else
                                                        {
                                                            <span class="text-muted">—</span>
                                                        }
                                                    }
                                                    else
                                                    {
                                                        <span class="text-muted">Expired</span>
                                                    }
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // ----------------------------
        // Client-side time/date helpers
        // ----------------------------

        // Pad helper
        function pad(n) { return n < 10 ? '0' + n : n; }

        // Get local current time in "HH:mm"
        function getLocalNowTime() {
            var d = new Date();
            return pad(d.getHours()) + ':' + pad(d.getMinutes());
        }

        // Get local today date string "yyyy-mm-dd"
        function getLocalTodayDate() {
            var d = new Date();
            // produce local-date in yyyy-mm-dd
            var tzOffset = d.getTimezoneOffset() * 60000;
            var localISO = new Date(d - tzOffset).toISOString().split('T')[0];
            return localISO;
        }

        document.addEventListener('DOMContentLoaded', function () {
            var dateInput = document.getElementById('slotDate');
            var startInput = document.getElementById('startTimeInput');
            var endInput = document.getElementById('endTimeInput');

            if (!dateInput || !startInput || !endInput) return;

            // Update min attributes based on selected date
            function updateTimeConstraints() {
                var todayStr = getLocalTodayDate();

                if (dateInput.value === todayStr) {
                    // If the selected date is today, enforce min = now
                    var nowTime = getLocalNowTime();
                    startInput.min = nowTime;

                    // If start is earlier than now, bump it forward
                    if (startInput.value < nowTime) {
                        startInput.value = nowTime;
                    }
                } else {
                    // For future dates, remove the min restriction
                    startInput.removeAttribute('min');
                }

                // Ensure end time is always after start time
                endInput.min = startInput.value || '00:00';
                if (!endInput.value || endInput.value <= startInput.value) {
                    // default end = start + 30 minutes
                    var parts = (startInput.value || '09:00').split(':');
                    var h = parseInt(parts[0], 10), m = parseInt(parts[1], 10) + 30;
                    h += Math.floor(m / 60);
                    m = m % 60;
                    if (h >= 24) { h = 23; m = 59; }
                    endInput.value = pad(h) + ':' + pad(m);
                }
            }

            // run on load
            updateTimeConstraints();

            // update when date or start changes
            dateInput.addEventListener('change', updateTimeConstraints);
            startInput.addEventListener('change', updateTimeConstraints);

            // ----------------------------
            // Mark as completed (AJAX)
            // ----------------------------
            // Sends appointmentId + antiforgery token in urlencoded body
            window.markCompleted = function (id) {
                var tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
                if (!tokenInput) {
                    alert('Request verification token not found. Please reload the page.');
                    return;
                }
                var token = tokenInput.value;

                var body = 'appointmentId=' + encodeURIComponent(id) + '&__RequestVerificationToken=' + encodeURIComponent(token);

                fetch('@Url.Action("MarkAsCompleted", "Doctor")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    body: body
                })
                .then(function (res) { return res.json(); })
                .then(function (data) {
                    alert(data.message);
                    if (data.success) location.reload();
                })
                .catch(function (err) {
                    console.error(err);
                    alert('An error occurred while marking the appointment as completed.');
                });
            };

            // Delete appointment slot (simple GET redirect)
            window.confirmDelete = function (id) {
                if (confirm('Delete this slot?')) {
                    window.location.href = '/Doctor/DeleteAppointment/' + id;
                }
            };
        });
    </script>
}

<style>
    .doctor-header {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-radius: 10px;
    }

    .doctor-avatar img {
        width: 70px;
        height: 70px;
        border-radius: 50%;
        object-fit: cover;
    }
</style>
